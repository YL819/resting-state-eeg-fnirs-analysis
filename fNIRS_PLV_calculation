%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Resting-state fNIRS functional connectivity: PLV
%
% This script computes Phase-Locking Value (PLV) matrices 
% from preprocessed fNIRS (oxy-Hb) signals.
%
% Input:  .mat files exported from NIRS-KIT preprocessing
% Output: PLVmatrix_resting.mat
%
% Author: Liu Y
% Year: 2025
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear; clc; close all;

%% Step 1: Load preprocessed NIRS-KIT data (oxy & deoxy) and save simplified data
folderPath = 'E:\Experiment\Data\RestData_Processed\fNIRS\FC\young\';

for i = 1:21   % <-- modify according to subject number
    filename = sprintf('sub%02d.mat', i);
    load(fullfile(folderPath, filename));
    deoxy = nirsdata.dxyData;
    oxy   = nirsdata.oxyData;
    save(fullfile(folderPath, filename), 'deoxy', 'oxy'); % overwrite with simplified data
end

%% Step 2: Compute Phase-Locking Value (PLV)
ConditionDir = folderPath;
Condition_Files = dir(fullfile(ConditionDir,'sub*.mat')); 
FileNames = {Condition_Files.name};

for sub = 1:length(FileNames)
    load(fullfile(ConditionDir, FileNames{sub}));
    
    % Initialize
    numCh = size(oxy,2);
    plvMat = zeros(numCh,numCh);
    
    % Compute PLV across all channel pairs
    for ch1 = 1:numCh
        for ch2 = 1:numCh
            p1 = angle(hilbert(oxy(:,ch1)));
            p2 = angle(hilbert(oxy(:,ch2)));
            rp = p1 - p2;
            plvMat(ch1,ch2) = abs(sum(exp(1i*rp))/length(rp));
        end
    end
    
    plv_oxy(:,:,sub) = plvMat;
    waitbar(sub/length(FileNames))
end

%% Step 3: Save results
save PLVmatrix_resting.mat plv_oxy
